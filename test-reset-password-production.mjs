#!/usr/bin/env node

async function testResetPasswordProduction() {
  console.log('üß™ Test de la solution reset password en production...\n');
  
  const baseUrl = 'https://ciara.city';
  
  // Test 1: Route directe (devrait rediriger)
  console.log('1Ô∏è‚É£ Test de la route directe /reset-password...');
  try {
    const response = await fetch(`${baseUrl}/reset-password`);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    if (response.status === 200) {
      console.log('   ‚úÖ Route accessible directement');
    } else if (response.status === 404) {
      console.log('   ‚ö†Ô∏è  404 - Le script de redirection devrait g√©rer cela');
    } else {
      console.log('   ‚ùå Statut inattendu');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur de connexion:', error.message);
  }
  
  // Test 2: Route avec param√®tres (devrait rediriger)
  console.log('\n2Ô∏è‚É£ Test de la route avec param√®tres...');
  try {
    const response = await fetch(`${baseUrl}/reset-password?code=test123&type=recovery`);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    if (response.status === 200) {
      console.log('   ‚úÖ Route accessible avec param√®tres');
    } else if (response.status === 404) {
      console.log('   ‚ö†Ô∏è  404 - Le script de redirection devrait g√©rer cela');
    } else {
      console.log('   ‚ùå Statut inattendu');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur de connexion:', error.message);
  }
  
  // Test 3: Format SPA (devrait fonctionner)
  console.log('\n3Ô∏è‚É£ Test du format SPA /?/reset-password...');
  try {
    const response = await fetch(`${baseUrl}/?/reset-password?code=test123&type=recovery`);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    if (response.status === 200) {
      console.log('   ‚úÖ Format SPA fonctionne');
    } else {
      console.log('   ‚ùå Format SPA ne fonctionne pas');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur de connexion:', error.message);
  }
  
  // Test 4: Simulation du flux Supabase
  console.log('\n4Ô∏è‚É£ Test de simulation du flux Supabase...');
  const testUrl = `${baseUrl}/reset-password?code=pkce_test123&type=recovery&token=test456`;
  console.log(`   URL de test: ${testUrl}`);
  console.log('   Ouvrez cette URL dans votre navigateur pour tester');
  
  console.log('\nüìã Instructions de test manuel:');
  console.log('1. Ouvrez votre navigateur');
  console.log('2. Allez sur:', `${baseUrl}/reset-password`);
  console.log('3. V√©rifiez que vous √™tes redirig√© vers:', `${baseUrl}/?/reset-password`);
  console.log('4. Testez avec des param√®tres:', `${baseUrl}/reset-password?code=test123&type=recovery`);
  console.log('5. V√©rifiez que les param√®tres sont pr√©serv√©s');
  
  console.log('\nüîç R√©sultats attendus:');
  console.log('- ‚úÖ Redirection automatique vers le format SPA');
  console.log('- ‚úÖ Param√®tres pr√©serv√©s dans l\'URL');
  console.log('- ‚úÖ Page de r√©initialisation accessible');
  console.log('- ‚úÖ Pas d\'erreur 404');
  
  console.log('\n‚ö†Ô∏è  Si les tests √©chouent:');
  console.log('- V√©rifiez que les corrections ont √©t√© d√©ploy√©es');
  console.log('- Attendez la fin de la build GitHub Actions');
  console.log('- Videz le cache du navigateur');
  console.log('- Testez en navigation priv√©e');
}

// Ex√©cuter le test
testResetPasswordProduction().catch(console.error);
