#!/usr/bin/env node

async function validationResetPasswordFinal() {
  console.log('üéØ VALIDATION FINALE - Reset Password Solution\n');
  
  const baseUrl = 'https://ciara.city';
  
  console.log('‚è≥ V√©rification du d√©ploiement...\n');
  
  // Test 1: V√©rifier que le site principal fonctionne
  console.log('1Ô∏è‚É£ Test du site principal...');
  try {
    const response = await fetch(baseUrl);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    if (response.status === 200) {
      console.log('   ‚úÖ Site principal accessible');
    } else {
      console.log('   ‚ùå Site principal inaccessible');
      return;
    }
  } catch (error) {
    console.log('   ‚ùå Erreur de connexion:', error.message);
    return;
  }
  
  // Test 2: Test de la route directe (devrait maintenant fonctionner)
  console.log('\n2Ô∏è‚É£ Test de la route directe /reset-password...');
  try {
    const response = await fetch(`${baseUrl}/reset-password`);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    if (response.status === 200) {
      console.log('   ‚úÖ Route directe accessible !');
    } else if (response.status === 404) {
      console.log('   ‚ö†Ô∏è  404 - Le script de redirection devrait g√©rer cela');
      console.log('   üí° Essayez d\'ouvrir cette URL dans votre navigateur');
    } else {
      console.log('   ‚ùå Statut inattendu');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur de connexion:', error.message);
  }
  
  // Test 3: Test avec param√®tres
  console.log('\n3Ô∏è‚É£ Test avec param√®tres...');
  try {
    const response = await fetch(`${baseUrl}/reset-password?code=test123&type=recovery`);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    if (response.status === 200) {
      console.log('   ‚úÖ Route avec param√®tres accessible !');
    } else if (response.status === 404) {
      console.log('   ‚ö†Ô∏è  404 - Le script de redirection devrait g√©rer cela');
    } else {
      console.log('   ‚ùå Statut inattendu');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur de connexion:', error.message);
  }
  
  // Test 4: Format SPA (devrait toujours fonctionner)
  console.log('\n4Ô∏è‚É£ Test du format SPA...');
  try {
    const response = await fetch(`${baseUrl}/?/reset-password?code=test123&type=recovery`);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    if (response.status === 200) {
      console.log('   ‚úÖ Format SPA fonctionne');
    } else {
      console.log('   ‚ùå Format SPA ne fonctionne pas');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur de connexion:', error.message);
  }
  
  console.log('\nüîç TESTS MANUELS √Ä EFFECTUER :');
  console.log('\nüì± Test 1 - Route directe :');
  console.log(`   Ouvrez : ${baseUrl}/reset-password`);
  console.log('   R√©sultat attendu : Redirection automatique vers le format SPA');
  
  console.log('\nüì± Test 2 - Avec param√®tres :');
  console.log(`   Ouvrez : ${baseUrl}/reset-password?code=test123&type=recovery`);
  console.log('   R√©sultat attendu : Redirection avec param√®tres pr√©serv√©s');
  
  console.log('\nüì± Test 3 - Flux Supabase simul√© :');
  console.log(`   Ouvrez : ${baseUrl}/reset-password?code=pkce_test123&type=recovery&token=test456`);
  console.log('   R√©sultat attendu : Page de r√©initialisation accessible');
  
  console.log('\nüéØ VALIDATION COMPL√àTE :');
  console.log('‚úÖ Si tous les tests passent : Solution fonctionnelle !');
  console.log('‚ö†Ô∏è  Si certains tests √©chouent : Attendre la fin du d√©ploiement');
  console.log('‚ùå Si tous les tests √©chouent : V√©rifier la configuration');
  
  console.log('\n‚è∞ D√©lai recommand√© : 3-5 minutes apr√®s le push');
  console.log('üîÑ Si probl√®me persiste : Vider le cache du navigateur');
}

// Ex√©cuter la validation
validationResetPasswordFinal().catch(console.error);
